datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts        Account[]
  financeAccounts FinanceAccount[]
  categories      Category[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FinanceAccount {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  userId       String        @db.ObjectId
  plaidId      String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int
  payee      String
  notes      String?
  date       DateTime?
  accountId  String         @db.ObjectId
  categoryId String?        @db.ObjectId
  account    FinanceAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category   Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
